% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_similarities.R
\name{get_similarities}
\alias{get_similarities}
\alias{get_similarities.embeddings}
\alias{get_similarities.data.frame}
\title{Row-wise Similarity and Distance Metrics}
\usage{
get_similarities(x, ...)

\method{get_similarities}{embeddings}(x, y, sim_func = cos_sim, ...)

\method{get_similarities}{data.frame}(x, cols, y, sim_func = cos_sim, ..., .keep_all = FALSE)
}
\arguments{
\item{x}{an embeddings object, matrix, or dataframe with one embedding per row}

\item{...}{additional parameters to be passed to methods}

\item{y}{a named list of vectors with the same dimensionality as embeddings in x.
Each item will result in a column in the output, showing the similarity of each
embedding in x to the vector specified in y. When \code{sim_func = anchored_sim},
each item of y should be a list with named vectors \code{pos} and \code{neg}.}

\item{sim_func}{a function that takes two vectors and outputs a scalar
similarity metric. Defaults to cosine similarity. For more options see
<\code{\link[=dot_prod]{Similarity and Distance Metrics}}>}

\item{cols}{tidyselect - columns that contain numeric embedding values}

\item{.keep_all}{logical. Keep all columns from input?}
}
\description{
\code{get_similarities(df, everything(), list(sim = vec2))} is essentially
equivalent to \code{mutate(rowwise(df), sim = cos_sim(c_across(everything()), vec2))}.
Includes methods for dataframes (in the style of \code{dplyr}), embeddings
objects, and matrices.
}
\section{Value}{

A tibble with columns \code{doc_id}, and similarity metrics.
If \code{.keep_all = TRUE}, the new columns will appear after existing ones.
}

\examples{
valence_embeddings <- predict(glove_twitter_25d, c("good", "bad"))
happy_vec <- predict(glove_twitter_25d, "happy")
sad_vec <- predict(glove_twitter_25d, "sad")

valence_embeddings |>
  get_similarities(list(happy = happy_vec))
valence_embeddings |>
  get_similarities(
    list(happy = list(pos = happy_vec, neg = sad_vec)),
    anchored_sim
    )

valence_df <- tibble::as_tibble(valence_embeddings, rownames = "token")
valence_df |> get_similarities(
  dim_1:dim_25,
  list(happy = happy_vec, sad = sad_vec),
  .keep_all = TRUE
  )
}
